{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","animate__animated","animate__flash","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"yMAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAO,IAEzBR,GAAgB,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACvCN,EAAc,MAMlB,SACE,uBACEO,KAAK,OACLC,MAAQT,EACRU,SAnBkB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCRlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,4DACJ,mCACTC,EAFa,gDAEmCC,UAAUH,GAF7C,8BACJ,oCADI,SAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIGA,EAAKC,OAJR,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCEPO,EAAc,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAClC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKU,MAAOA,IACtB,4BAAIA,QCFHM,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAEtB,ECHwB,SAACA,GACzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNY,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAY,WACRvB,EAAQC,GACPuB,MAAK,SAAAC,GAAI,OAAIH,EAAS,CACnBd,KAAMiB,EACNL,SAAS,SAEd,IAGIC,EDZuBK,CAAazB,GAA/Ba,EAAZ,EAAON,KAAYY,EAAnB,EAAmBA,QAEnB,OACI,qCACI,oBAAIH,UAAU,oCAAd,SAAoDhB,IAClDmB,GAAW,mBAAGO,mBAAiB,EAACC,gBAAc,EAAnC,sBACb,qBAAKX,UAAU,WAAf,SAEQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADAA,EAAIC,aEbxBiB,EAAe,WACxB,MAAoC1C,mBAAS,CAAE,UAA/C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAEA,OACI,qCACA,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBACA,6BAEI4C,EAAWpB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MCV1B8B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.f328a74e.chunk.js","sourcesContent":["import React,{useState} from 'react'\nimport { GifExpertApp } from '../GifExpertApp'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({setCategories}) => {\n\n    const [inputValue, setInputValue] = useState('')\n    const handleInputChange = (e) =>{\n        setInputValue(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if( inputValue.trim().length>2)\n        {\n            setCategories ( cats => [inputValue,...cats] )\n            setInputValue('')\n        }\n        \n    }\n\n    return (\n        <form onSubmit={ handleSubmit }>\n          <input \n            type=\"text\"\n            value={ inputValue}\n            onChange={handleInputChange }\n          />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","export const getGifs = async(category) => {\n    const apiKey = 'Cc85aFkt7OIA5hVi9hbM7XcnCht1fUGQ'\n    const url = `http://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=50&&api_key=${ apiKey }`;\n    const resp = await fetch(url)\n    const {data } = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n    \n    return gifs;\n}\n","import React from 'react'\n\nexport const GifGridItem = ({id,title,url}) => {\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} title={title}></img>\n            <p>{title}</p>          \n        </div>\n    )\n}\n","import React,{useState, useEffect} from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem'\n\nexport const GifGrid = ({ category }) => {\n\n    const {data:images,loading} = useFetchGifs(category);\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\n            { loading && <p animate__animated animate__flash>Cargando</p> }\n            <div className=\"cardGrid\">\n                {\n                    images.map( img => (\n                        <GifGridItem \n                            key={img.id}\n                            { ...img } // usamos el spread del img para sacar sus propiedades y mandar\n                        />\n                    ))\n                }\n            </div>\n        </>\n    )\n}\n","import { useState,useEffect } from \"react\"\nimport { getGifs } from '../helpers/getGifs'\n\nexport const useFetchGifs = (category) =>{\n    const [state, setstate] = useState({\n        data: [],\n        loading: true\n    })\n\n    useEffect(  () => {\n        getGifs(category)\n        .then(imgs => setstate({\n            data: imgs,\n            loading: false\n        }))\n    }, [])\n\n\n    return state;\n}","import React, {useState} from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\nexport const GifExpertApp = () => {\n    const [categories, setCategories] = useState([ 'Pesos'])\n\n    return (\n        <>\n        <h2>GifExpertApp</h2>\n        <AddCategory setCategories={ setCategories } />\n        <hr></hr>\n        <ol>\n        {\n            categories.map( category => (\n                <GifGrid \n                    key={ category } \n                    category={ category } \n                />\n            ))\n        }\n        </ol>\n        \n        </>\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}